/* 1. Пусть в таблице users поля created_at и updated_at оказались незаполненными. Заполните их
текущими датой и временем. */
 
 UPDATE users SET created_at = NOW(), updated_at = NOW();
 SELECT * FROM users;

/*
 +----+-----------+-------------+---------------------+---------------------+
| id | name      | birthday_at | created_at          | updated_at          |
+----+-----------+-------------+---------------------+---------------------+
|  1 | Геннадий  | 1990-10-05  | 2020-02-05 16:59:41 | 2020-02-05 16:59:41 |
|  2 | Наталья   | 1984-11-12  | 2020-02-05 16:59:41 | 2020-02-05 16:59:41 |
|  3 | Александр | 1985-05-20  | 2020-02-05 16:59:41 | 2020-02-05 16:59:41 |
|  4 | Сергей    | 1988-02-14  | 2020-02-05 16:59:41 | 2020-02-05 16:59:41 |
|  5 | Иван      | 1998-01-12  | 2020-02-05 16:59:41 | 2020-02-05 16:59:41 |
|  6 | Мария     | 1992-08-29  | 2020-02-05 16:59:41 | 2020-02-05 16:59:41 |
|  8 | Светлана  | 1988-02-04  | 2020-02-05 16:59:41 | 2020-02-05 16:59:41 |
|  9 | Олег      | 1998-03-20  | 2020-02-05 16:59:41 | 2020-02-05 16:59:41 |
| 10 | Юлия      | 2006-07-12  | 2020-02-05 16:59:41 | 2020-02-05 16:59:41 |
+----+-----------+-------------+---------------------+---------------------+
 */
 

/* 2. Таблица users была неудачно спроектирована. Записи created_at и updated_at были заданы
типом VARCHAR и в них долгое время помещались значения в формате "20.10.2017 8:10".
Необходимо преобразовать поля к типу DATETIME, сохранив введеные ранее значения. */
  
DROP TABLE IF EXISTS users__;
  
  CREATE TABLE users__ (
	 id SERIAL PRIMARY KEY,
	 name VARCHAR(255) COMMENT 'Имя пользователя',
	 birthday_at DATE COMMENT 'Дата рождения',
	 created_at VARCHAR(255),
	 updated_at VARCHAR(255)
 ) COMMENT = 'Покупатели';


INSERT INTO users__ (name, birthday_at, created_at, updated_at) VALUES
  ('Геннадий', '1990-10-05', '07.01.2016 12:05', '07.01.2016 12:05'),
  ('Наталья', '1984-11-12', '20.05.2016 16:32', '20.05.2016 16:32'),
  ('Александр', '1985-05-20', '14.08.2016 16:35', '14.08.2016 16:35'),
  ('Сергей', '1988-02-14', 	'14.08.2016 16:35', '14.08.2016 16:35'),
  ('Иван', '1998-01-12', '14.08.2016 16:35', '14.08.2016 16:35'),
  ('Мария', '1992-08-29', '14.08.2016 16:35', '14.08.2016 16:35');

/*
+----+-----------+-------------+------------------+------------------+
| id | name      | birthday_at | created_at       | updated_at       |
+----+-----------+-------------+------------------+------------------+
|  1 | Геннадий  | 1990-10-05  | 07.01.2016 12:05 | 07.01.2016 12:05 |
|  2 | Наталья   | 1984-11-12  | 20.05.2016 16:32 | 20.05.2016 16:32 |
|  3 | Александр | 1985-05-20  | 14.08.2016 16:35 | 14.08.2016 16:35 |
|  4 | Сергей    | 1988-02-14  | 14.08.2016 16:35 | 14.08.2016 16:35 |
|  5 | Иван      | 1998-01-12  | 14.08.2016 16:35 | 14.08.2016 16:35 |
|  6 | Мария     | 1992-08-29  | 14.08.2016 16:35 | 14.08.2016 16:35 |
+----+-----------+-------------+------------------+------------------+ 
*/  
  
UPDATE users 
 SET 
	created_at = STR_TO_DATE(created_at, '%d.%m.%Y %k:%i'),
	updated_at = STR_TO_DATE(created_at, '%d.%m.%Y %k:%i');

SELECT * FROM users__ ;

/*
+----+-----------+-------------+---------------------+---------------------+
| id | name      | birthday_at | created_at          | updated_at          |
+----+-----------+-------------+---------------------+---------------------+
|  1 | Геннадий  | 1990-10-05  | 2016-01-07 12:05:00 | 2016-01-07 12:05:00 |
|  2 | Наталья   | 1984-11-12  | 2016-05-20 16:32:00 | 2016-05-20 16:32:00 |
|  3 | Александр | 1985-05-20  | 2016-08-14 16:35:00 | 2016-08-14 16:35:00 |
|  4 | Сергей    | 1988-02-14  | 2016-08-14 16:35:00 | 2016-08-14 16:35:00 |
|  5 | Иван      | 1998-01-12  | 2016-08-14 16:35:00 | 2016-08-14 16:35:00 |
|  6 | Мария     | 1992-08-29  | 2016-08-14 16:35:00 | 2016-08-14 16:35:00 |
+----+-----------+-------------+---------------------+---------------------+
*/

DESCRIBE users__;
/*
+-------------+-----------------+------+-----+---------+----------------+
| Field       | Type            | Null | Key | Default | Extra          |
+-------------+-----------------+------+-----+---------+----------------+
| id          | bigint unsigned | NO   | PRI | NULL    | auto_increment |
| name        | varchar(255)    | YES  |     | NULL    |                |
| birthday_at | date            | YES  |     | NULL    |                |
| created_at  | varchar(255)    | YES  |     | NULL    |                |
| updated_at  | varchar(255)    | YES  |     | NULL    |                |
+-------------+-----------------+------+-----+---------+----------------+
*/

ALTER TABLE users__
	CHANGE 	updated_at apdated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;
	
DESCRIBE users__;	
/*
+-------------+-----------------+------+-----+-------------------+-----------------------------------------------+
| Field       | Type            | Null | Key | Default           | Extra                                         |
+-------------+-----------------+------+-----+-------------------+-----------------------------------------------+
| id          | bigint unsigned | NO   | PRI | NULL              | auto_increment                                |
| name        | varchar(255)    | YES  |     | NULL              |                                               |
| birthday_at | date            | YES  |     | NULL              |                                               |
| created_at  | varchar(255)    | YES  |     | NULL              |                                               |
| apdated_at  | datetime        | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED on update CURRENT_TIMESTAMP |
+-------------+-----------------+------+-----+-------------------+-----------------------------------------------+
*/

/*	3. В таблице складских запасов storehouses_products в поле value могут встречаться самые
разные цифры: 0, если товар закончился и выше нуля, если на складе имеются запасы.
Необходимо отсортировать записи таким образом, чтобы они выводились в порядке
увеличения значения value. Однако, нулевые запасы должны выводиться в конце, после всех
записей. */

SELECT * FROM storehouses_products ORDER BY value;
/*
+----+---------------+------------+-------+---------------------+---------------------+
| id | storehouse_id | product_id | value | created_at          | updated_at          |
+----+---------------+------------+-------+---------------------+---------------------+
|  1 |             1 |        543 |     0 | 2020-02-05 18:19:29 | 2020-02-05 18:19:29 |
|  3 |             1 |       3432 |     0 | 2020-02-05 18:19:29 | 2020-02-05 18:19:29 |
|  6 |             1 |        683 |     1 | 2020-02-05 18:19:29 | 2020-02-05 18:19:29 |
|  4 |             1 |        826 |    30 | 2020-02-05 18:19:29 | 2020-02-05 18:19:29 |
|  5 |             1 |        719 |   500 | 2020-02-05 18:19:29 | 2020-02-05 18:19:29 |
|  2 |             1 |        789 |  2500 | 2020-02-05 18:19:29 | 2020-02-05 18:19:29 |
+----+---------------+------------+-------+---------------------+---------------------+
*/

SELECT id, value, IF(value > 0, 0, 1) AS sort FROM storehouses_products ORDER BY value;
/*
+----+-------+------+
| id | value | sort |
+----+-------+------+
|  1 |     0 |    1 |
|  3 |     0 |    1 |
|  6 |     1 |    0 |
|  4 |    30 |    0 |
|  5 |   500 |    0 |
|  2 |  2500 |    0 |
+----+-------+------+
*/

SELECT * FROM storehouses_products ORDER BY IF(value > 0, 0, 1), value;
/* 
+----+---------------+------------+-------+---------------------+---------------------+
| id | storehouse_id | product_id | value | created_at          | updated_at          |
+----+---------------+------------+-------+---------------------+---------------------+
|  6 |             1 |        683 |     1 | 2020-02-05 18:19:29 | 2020-02-05 18:19:29 |
|  4 |             1 |        826 |    30 | 2020-02-05 18:19:29 | 2020-02-05 18:19:29 |
|  5 |             1 |        719 |   500 | 2020-02-05 18:19:29 | 2020-02-05 18:19:29 |
|  2 |             1 |        789 |  2500 | 2020-02-05 18:19:29 | 2020-02-05 18:19:29 |
|  1 |             1 |        543 |     0 | 2020-02-05 18:19:29 | 2020-02-05 18:19:29 |
|  3 |             1 |       3432 |     0 | 2020-02-05 18:19:29 | 2020-02-05 18:19:29 |
+----+---------------+------------+-------+---------------------+---------------------+ 
 */
 
/* 4. (по желанию) Из таблицы users необходимо извлечь пользователей, родившихся в августе и
мае. Месяцы заданы в виде списка английских названий ('may', 'august')
*/

SELECT name FROM users WHERE DATE_FORMAT(birthday_at, '%M') IN ('may', 'august');
/*
+-----------+
| name      |
+-----------+
| Александр |
| Мария     |
+-----------+
*/


/* 5. (по желанию) Из таблицы catalogs извлекаются записи при помощи запроса. SELECT * FROM
catalogs WHERE id IN (5, 1, 2); Отсортируйте записи в порядке, заданном в списке IN. */

SELECT * FROM catologs WHERE id IN (5, 1, 2) ORDER BY FIELD(id, 5, 1, 2);
/*
+----+----------------------+
| id | name                 |
+----+----------------------+
|  5 | Сетевое оборудование |
|  1 | Процессоры           |
|  2 | Мат.платы            |
+----+----------------------+
*/